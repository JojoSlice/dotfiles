return {
	"nvim-tree/nvim-web-devicons",

	{
		"akinsho/bufferline.nvim",
		version = "*",
		dependencies = "nvim-tree/nvim-web-devicons",
		opts = {
			options = {
				mode = "buffers",
				numbers = "none",
				close_command = "bdelete! %d",
				right_mouse_command = "bdelete! %d",
				left_mouse_command = "buffer %d",
				middle_mouse_command = nil,
				indicator = {
					icon = "▎",
					style = "icon",
				},
				buffer_close_icon = "󰅖",
				modified_icon = "●",
				close_icon = "",
				left_trunc_marker = "",
				right_trunc_marker = "",
				max_name_length = 18,
				max_prefix_length = 15,
				truncate_names = true,
				tab_size = 18,
				diagnostics = "nvim_lsp",
				diagnostics_update_in_insert = false,
				offsets = {
					{
						filetype = "NvimTree",
						text = "File Explorer",
						text_align = "left",
						separator = true,
					},
				},
				color_icons = true,
				show_buffer_icons = true,
				show_buffer_close_icons = true,
				show_close_icon = true,
				show_tab_indicators = true,
				separator_style = "thin",
				enforce_regular_tabs = false,
				always_show_bufferline = true,
				hover = {
					enabled = true,
					delay = 200,
					reveal = { "close" },
				},
			},
		},
	},

	{
		"nvim-lualine/lualine.nvim",
		dependencies = { "nvim-tree/nvim-web-devicons" },
		opts = {
			options = {
				icons_enabled = true,
				theme = "rose-pine",
				component_separators = { left = "", right = "" },
				section_separators = { left = "", right = "" },
				disabled_filetypes = { statusline = {}, winbar = {} },
				ignore_focus = {},
				always_divide_middle = true,
				globalstatus = false,
				refresh = { statusline = 1000, tabline = 1000, winbar = 1000 },
			},
			sections = {
				lualine_a = { "mode" },
				lualine_b = { "branch", "diff", "diagnostics" },
				lualine_c = { "filename" },
				lualine_x = { "encoding", "fileformat", "filetype" },
				lualine_y = { "progress" },
				lualine_z = { "location" },
			},
			inactive_sections = {
				lualine_a = {},
				lualine_b = {},
				lualine_c = { "filename" },
				lualine_x = { "location" },
				lualine_y = {},
				lualine_z = {},
			},
			tabline = {},
			winbar = {},
			inactive_winbar = {},
			extensions = {},
		},
	},

	{
		"rcarriga/nvim-notify",
		opts = {},
		config = function(_, opts)
			local notify = require("notify")
			notify.setup(opts)
			vim.notify = notify
		end,
	},

	{
		"folke/which-key.nvim",
		event = "VeryLazy",
		opts = {
			preset = "modern",
			delay = 300,
		},
		config = function(_, opts)
			local wk = require("which-key")
			wk.setup(opts)

			wk.add({
				-- Leader groups
				{ "<leader>f", group = "Find (Telescope)" },
				{ "<leader>d", group = "Debug (DAP)" },
				{ "<leader>ds", group = "Debug Step" },
				{ "<leader>g", group = "Git" },
				{ "<leader>r", group = "Rust" },
				{ "<leader>k", group = "Kulala (HTTP)" },
				{ "<leader>s", group = "Search/Replace (Spectre)" },
				{ "<leader>c", group = "Code" },
				{ "<leader>p", group = "Oil (File explorer)" },
				{ "<leader>b", group = "Buffer" },
				{ "<leader>1", hidden = true },
				{ "<leader>2", hidden = true },
				{ "<leader>3", hidden = true },
				{ "<leader>4", hidden = true },
				{ "<leader>5", hidden = true },

				-- Vim text objects och operators
				{ "c", group = "Change" },
				{ "ci", group = "Change inside" },
				{ 'ci"', desc = "Change inside quotes" },
				{ "ci'", desc = "Change inside single quotes" },
				{ "ci(", desc = "Change inside parentheses" },
				{ "ci)", desc = "Change inside parentheses" },
				{ "ci{", desc = "Change inside braces" },
				{ "ci}", desc = "Change inside braces" },
				{ "ci[", desc = "Change inside brackets" },
				{ "ci]", desc = "Change inside brackets" },
				{ "ci<", desc = "Change inside angle brackets" },
				{ "ci>", desc = "Change inside angle brackets" },
				{ "cit", desc = "Change inside tag" },
				{ "ciw", desc = "Change inside word" },
				{ "caw", desc = "Change around word" },
				{ "ca", group = "Change around" },
				{ 'ca"', desc = "Change around quotes" },
				{ "ca'", desc = "Change around single quotes" },
				{ "ca(", desc = "Change around parentheses" },
				{ "ca)", desc = "Change around parentheses" },
				{ "ca{", desc = "Change around braces" },
				{ "ca}", desc = "Change around braces" },
				{ "ca[", desc = "Change around brackets" },
				{ "ca]", desc = "Change around brackets" },
				{ "ca<", desc = "Change around angle brackets" },
				{ "ca>", desc = "Change around angle brackets" },
				{ "cat", desc = "Change around tag" },

				{ "d", group = "Delete" },
				{ "di", group = "Delete inside" },
				{ 'di"', desc = "Delete inside quotes" },
				{ "di'", desc = "Delete inside single quotes" },
				{ "di(", desc = "Delete inside parentheses" },
				{ "di)", desc = "Delete inside parentheses" },
				{ "di{", desc = "Delete inside braces" },
				{ "di}", desc = "Delete inside braces" },
				{ "di[", desc = "Delete inside brackets" },
				{ "di]", desc = "Delete inside brackets" },
				{ "di<", desc = "Delete inside angle brackets" },
				{ "di>", desc = "Delete inside angle brackets" },
				{ "dit", desc = "Delete inside tag" },
				{ "diw", desc = "Delete inside word" },
				{ "daw", desc = "Delete around word" },
				{ "da", group = "Delete around" },
				{ 'da"', desc = "Delete around quotes" },
				{ "da'", desc = "Delete around single quotes" },
				{ "da(", desc = "Delete around parentheses" },
				{ "da)", desc = "Delete around parentheses" },
				{ "da{", desc = "Delete around braces" },
				{ "da}", desc = "Delete around braces" },
				{ "da[", desc = "Delete around brackets" },
				{ "da]", desc = "Delete around brackets" },
				{ "da<", desc = "Delete around angle brackets" },
				{ "da>", desc = "Delete around angle brackets" },
				{ "dat", desc = "Delete around tag" },

				{ "y", group = "Yank" },
				{ "yi", group = "Yank inside" },
				{ 'yi"', desc = "Yank inside quotes" },
				{ "yi'", desc = "Yank inside single quotes" },
				{ "yi(", desc = "Yank inside parentheses" },
				{ "yi)", desc = "Yank inside parentheses" },
				{ "yi{", desc = "Yank inside braces" },
				{ "yi}", desc = "Yank inside braces" },
				{ "yi[", desc = "Yank inside brackets" },
				{ "yi]", desc = "Yank inside brackets" },
				{ "yi<", desc = "Yank inside angle brackets" },
				{ "yi>", desc = "Yank inside angle brackets" },
				{ "yit", desc = "Yank inside tag" },
				{ "yiw", desc = "Yank inside word" },
				{ "yaw", desc = "Yank around word" },
				{ "ya", group = "Yank around" },
				{ 'ya"', desc = "Yank around quotes" },
				{ "ya'", desc = "Yank around single quotes" },
				{ "ya(", desc = "Yank around parentheses" },
				{ "ya)", desc = "Yank around parentheses" },
				{ "ya{", desc = "Yank around braces" },
				{ "ya}", desc = "Yank around braces" },
				{ "ya[", desc = "Yank around brackets" },
				{ "ya]", desc = "Yank around brackets" },
				{ "ya<", desc = "Yank around angle brackets" },
				{ "ya>", desc = "Yank around angle brackets" },
				{ "yat", desc = "Yank around tag" },

				-- Visual mode
				{ "v", group = "Visual", mode = { "n", "v" } },
				{ "vi", group = "Visual inside", mode = { "n", "v" } },
				{ 'vi"', desc = "Visual inside quotes", mode = { "n", "v" } },
				{ "vi'", desc = "Visual inside single quotes", mode = { "n", "v" } },
				{ "vi(", desc = "Visual inside parentheses", mode = { "n", "v" } },
				{ "vi)", desc = "Visual inside parentheses", mode = { "n", "v" } },
				{ "vi{", desc = "Visual inside braces", mode = { "n", "v" } },
				{ "vi}", desc = "Visual inside braces", mode = { "n", "v" } },
				{ "vi[", desc = "Visual inside brackets", mode = { "n", "v" } },
				{ "vi]", desc = "Visual inside brackets", mode = { "n", "v" } },
				{ "vi<", desc = "Visual inside angle brackets", mode = { "n", "v" } },
				{ "vi>", desc = "Visual inside angle brackets", mode = { "n", "v" } },
				{ "vit", desc = "Visual inside tag", mode = { "n", "v" } },
				{ "viw", desc = "Visual inside word", mode = { "n", "v" } },
				{ "vaw", desc = "Visual around word", mode = { "n", "v" } },
				{ "va", group = "Visual around", mode = { "n", "v" } },
				{ 'va"', desc = "Visual around quotes", mode = { "n", "v" } },
				{ "va'", desc = "Visual around single quotes", mode = { "n", "v" } },
				{ "va(", desc = "Visual around parentheses", mode = { "n", "v" } },
				{ "va)", desc = "Visual around parentheses", mode = { "n", "v" } },
				{ "va{", desc = "Visual around braces", mode = { "n", "v" } },
				{ "va}", desc = "Visual around braces", mode = { "n", "v" } },
				{ "va[", desc = "Visual around brackets", mode = { "n", "v" } },
				{ "va]", desc = "Visual around brackets", mode = { "n", "v" } },
				{ "va<", desc = "Visual around angle brackets", mode = { "n", "v" } },
				{ "va>", desc = "Visual around angle brackets", mode = { "n", "v" } },
				{ "vat", desc = "Visual around tag", mode = { "n", "v" } },

				-- Användbara motions
				{ "g", group = "Go to" },
				{ "gg", desc = "Go to first line" },
				{ "ge", desc = "Go to end of previous word" },
				{ "gE", desc = "Go to end of previous WORD" },
				{ "gj", desc = "Go down display line" },
				{ "gk", desc = "Go up display line" },
				{ "gd", desc = "Go to definition (LSP)" },
				{ "gD", desc = "Go to declaration (LSP)" },
				{ "gi", desc = "Go to last insert location" },
				{ "gv", desc = "Reselect last visual selection" },

				{ "z", group = "Fold / View" },
				{ "zz", desc = "Center cursor on screen" },
				{ "zt", desc = "Cursor to top of screen" },
				{ "zb", desc = "Cursor to bottom of screen" },
				{ "za", desc = "Toggle fold" },
				{ "zA", desc = "Toggle all folds" },
				{ "zo", desc = "Open fold" },
				{ "zO", desc = "Open all folds" },
				{ "zc", desc = "Close fold" },
				{ "zC", desc = "Close all folds" },
				{ "zM", desc = "Close all folds in buffer" },
				{ "zR", desc = "Open all folds in buffer" },

				-- Marks
				{ "m", group = "Mark" },
				{ "ma", desc = "Set mark a" },
				{ "'", group = "Jump to mark (line)" },
				{ "'a", desc = "Jump to mark a (line)" },
				{ "`", group = "Jump to mark (exact)" },
				{ "`a", desc = "Jump to mark a (exact)" },

				-- Search
				{ "f", group = "Find character forward" },
				{ "F", group = "Find character backward" },
				{ "t", group = "Till character forward" },
				{ "T", group = "Till character backward" },
				{ ";", desc = "Repeat last f/F/t/T" },
				{ ",", desc = "Repeat last f/F/t/T backwards" },
			})
		end,
	},

	{
		"stevearc/oil.nvim",
		dependencies = { "nvim-tree/nvim-web-devicons" },
		lazy = false,
		opts = {
			default_file_explorer = true,
			columns = { "icon" },
			view_options = { show_hidden = true },
		},
	},

	{
		"norcalli/nvim-colorizer.lua",
		event = { "BufReadPre", "BufNewFile" },
		opts = {},
	},
}
